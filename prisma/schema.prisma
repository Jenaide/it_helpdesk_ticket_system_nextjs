// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
enum Role {
  USER
  TECHNICIAN
  ADMINISTRATOR
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String
  avatar        String?

  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[] // tickets created by the user

  assignedTickets Ticket[] @relation("AssignedTickets") // tickets assigned to technician
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums for ticket priority, status and category.
// These enums can be used to categorize tickets based on their urgency and current state.
enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Category {
  TECHNICAL
  SOFTWARE
  HARDWARE
  NETWORK
  ACCESS
  OTHER
}

model Ticket {
  id              Int @id @default(autoincrement())
  subject         String
  description     String
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  userId          String
  user            User  @relation(fields: [userId], references: [id])

  assignedToId    String?  // technician id
  assignedTo      User?    @relation("AssignedTickets", fields: [assignedToId], references: [id])

  priority        TicketPriority
  status          TicketStatus  @default(OPEN)
  category        Category
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}